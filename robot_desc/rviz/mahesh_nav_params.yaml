amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "odom"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

amcl_map_client: 
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: odom
    robot_base_frame: base_link
    odom_topic: /odom
    transform_tolerance: 1.0
    default_nav_to_pose_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml" 
    #default_nav_to_pose_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/test.xml"
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    # controller server parameters (see Controller Server for more info)
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.45
      yaw_goal_tolerance: 0.75
      stateful: True


    # controller parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: -1.0
      # max_vel_x: 3.0
      # max_vel_y: 3.0
      # max_vel_theta: 3.0
      # min_speed_xy: 0.0
      # max_speed_xy: 2.0
      # min_speed_theta: 0.0

      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      # decel_lim_x: 0.0
      # decel_lim_y: 0.0
      # decel_lim_theta: 0.0
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      # plugin: "dwb_core::DWBLocalPlanner"
      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 0.44
      # max_vel_y: 0.0
      # max_vel_theta: 0.3
      # min_speed_xy: 0.0
      # max_speed_xy: 0.65
      # min_speed_theta: -0.3
      # acc_lim_x: 2.0 #2.5
      # acc_lim_y: 0.0
      # acc_lim_theta: 0.3 # 0.5
      # decel_lim_x: -2.0 #-2.5
      # decel_lim_y: 0.0
      # decel_lim_theta: -0.3 #0.5
      # vx_samples: 50
      # vy_samples: 1
      # vtheta_samples: 50
      # sim_time: 2.0
      # linear_granularity: 0.0625
      # angular_granularity: 0.125 #0.125
      # transform_tolerance: 0.2
      # xy_goal_tolerance: 0.45
      # trans_stopped_velocity: 0.25
      # short_circuit_trajectory_evaluation: True
      # limit_vel_cmd_in_traj: False
      # stateful: True
      # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # BaseObstacle.scale: 0.3
      # PathAlign.scale: 64.0
      # GoalAlign.scale: 32.0
      # PathAlign.forward_point_distance: 0.2
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0
      # GoalDist.scale: 24.0
      # RotateToGoal.scale: 1.0
      # RotateToGoal.slowing_factor: 4.0
      # RotateToGoal.lookahead_time: -1.0

#original values:
# local costmap = robot radius = 0.5
# global costmap = robot radius = 0.3
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 15.0
      footprint: "[ [0.4675, 0.46], [0.4675, -0.46], [-0.4675, -0.46], [-0.4675, 0.46] ]"
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: True
      width: 30
      height: 30
      origin_x: -15.0
      origin_y: -15.0
      resolution: 0.1
      robot_radius: 0.8
      # plugins: [ "inflation_layer", "obstacle_layer_lanes", "obstacle_layer_lanes1"]
      plugins: ["obstacle_layer_lanes", "obstacle_layer_lanes1", "obstacle_layer", "inflation_layer"] # "obstacle_layer_lanes", 
      obstacle_layer_lanes:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: lanes
       lanes:
         topic: /mega_fit_pc #/largest_lane
         clearing: True
         marking: True
         max_obstacle_height: 5.0
         min_obstacle_height: -5.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      obstacle_layer_lanes1:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: lanes
       lanes:
         topic: /mega_sec_fit_pc
         clearing: True
         marking: True
         max_obstacle_height: 5.0
         min_obstacle_height: -5.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      pothole_layer:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: potholes
       potholes:
         topic: /potholes
         clearing: True
         marking: True
         max_obstacle_height: 1.0
         min_obstacle_height: -3.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.5
        inflation_radius: 2.0 # Changing inflation layer radius from 1 to 1.5 (govind) 
      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   publish_voxel_map: True
      #   inf_is_valid: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   mark_threshold: 0
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 20.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 10.0
      #     obstacle_min_range: 0.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /lidar/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.0
          inf_is_valid: True
      # inflation_layer_lanes:
      #   plugin: "nav2_costmap_2d::InflationLayer"
      #   cost_scaling_factor: 5.0
      #   inflation_radius: 0.6
      
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
      
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 15.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.8
      footprint: "[ [0.4625, 0.325], [0.4625, -0.325], [-0.4625, -0.325], [-0.4625, 0.325] ]"
      resolution: 0.05
      height: 100
      width: 100
      origin_x: -50.0
      origin_y: -50.0
      track_unknown_space: True
      # plugins: ["static_layer", "obstacle_layer", "inflation_layer","voxel_layer","obstacle_layer_lanes","inflation_layer_lanes",]
      # plugins: [ "inflation_layer", "obstacle_layer_lanes", "obstacle_layer_lanes1"]
      plugins: ["obstacle_layer_lanes", "obstacle_layer_lanes1", "obstacle_layer", "inflation_layer"] #"obstacle_layer_lanes", 
      obstacle_layer_lanes:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: lanes
       lanes:
         topic: /mega_fit_pc#/largest_lane
         clearing: True
         marking: True
         max_obstacle_height: 5.0
         min_obstacle_height: -5.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      obstacle_layer_lanes1:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: lanes
       lanes:
         topic: /mega_sec_fit_pc
         clearing: True
         marking: True
         max_obstacle_height: 5.0
         min_obstacle_height: -5.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      pothole_layer:
       plugin: "nav2_costmap_2d::ObstacleLayer"
       enabled: True
       observation_sources: potholes
       potholes:
         topic: /potholes
         clearing: True
         marking: True
         max_obstacle_height: 1.0
         min_obstacle_height: -3.0
         data_type: "PointCloud2" #"LaserScan" 
         # obstacle_range: 20
         # raytrace_range: 25
         raytrace_max_range: 20.0
         raytrace_min_range: 0.0
         obstacle_max_range: 10.0
         obstacle_min_range: 0.0
         inf_is_valid: True
         observation_persistence: 0.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          inf_is_valid: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.0
      

      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   publish_voxel_map: True
      #   inf_is_valid: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   mark_threshold: 0
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 20.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 10.0
      #     obstaclescan_min_range: 0.0
      # static_layer:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0
        inflation_radius: 2.0
      always_send_full_costmap: True

      # inflation_layer_lidar:
      #   plugin: "nav2_costmap_2d::InflationLayer"
      #   cost_scaling_factor: 0.07
      #   inflation_radius: 0.25
      # always_send_full_costmap: True
 
# map_server:
#   ros__parameters:
#     use_sim_time: False
#     yaml_filename: "/home/abhiyaan-orin/map.yaml"

# map_saver:
#   ros__parameters:
#     use_sim_time: False
#     save_map_timeout: 5.0
#     free_thresh_default: 0.25
#     occupied_thresh_default: 0.65
#     map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 0.1
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
       plugin: "nav2_navfn_planner/NavfnPlanner"
       tolerance: 0.2
       use_astar: true
       allow_unknown: true

    # GridBased:
    #   plugin: "nav2_smac_planner/SmacPlanner2D"
    #   tolerance: 0.2                        # tolerance for planning if unable to reach exact pose, in meters
    #   downsample_costmap: true              # whether or not to downsample the map
    #   downsampling_factor: 3                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
    #   allow_unknown: true                   # allow traveling in unknown space
    #   max_iterations: 20000scan
    #   max_on_approach_iterations: 100       # maximum nulattice_filepathmber of iterations to attempt to reach goal once in tolerance
    #   max_planning_time: 2.0                # max time in s for planner to plan, smooth
    #   cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
    #   use_final_approach_orientation: true  # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
    #   smoother:
    #     max_iterations: 1000
    #     w_smooth: 0.3
    #     w_data: 0.2
    #     tolerance: 1.0e-10


    #GridBased:
      #plugin: "nav2_smac_planner/SmacPlannerLattice"
      #tolerance: 0.2                        # tolerance for planning if unable to reach exact pose, in meters
      #downsample_costmap: true             # whether or not to downsample the map
      #downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      #allow_unknown: true                   # allow traveling in unknown space
      ## lattice_filepath: "/home/abhiyaan-orin/ros2_ws/src/vnav/lattices/output.json"
      #lattice_filepath: "/opt/ros/humble/share/nav2_smac_planner/sample_primitives/5cm_resolution/0.5m_turning_radius/diff/output.json"
      #max_iterations: 2000
      ## maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      #max_on_approach_iterations: 100       # maximum n umber of iterations to attempt to reach goal once in tolerance
      #max_planning_time: 2.0                # max time in s for planner to plan, smooth
      #cost_travel_multiplier: 2.0 #2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will 
      ## place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      #use_final_approach_orientation: True  # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      #angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      #analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      #analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      #minimum_turning_radius: 0.10        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      #reverse_penalty: 10.0                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      #change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      #non_straight_penalty: 1.0          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      #cost_penalty: 15.0 #2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      #retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      #rotation_penalty: 3.0 #5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      #lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      #cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      #allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      #smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.

      #smoother:
        #max_iterations: 1000
        #w_smooth: 0.5
        #w_data: 0.2
        #tolerance: 1.0e-10

# smoother_server:
#   ros__parameters:
#     use_sim_time: True
#     smoother_plugins: ["SmoothPath"]

#     SmoothPath:
#       plugin: "nabehavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw
#     footprint_topic: local_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom
#     robot_base_frame: base_link
#     transform_timeout: 1.0
#     use_sim_time: False
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 0.425 #0.125
#     min_rotational_vel: -0.425 #0.065
#     rotational_acc_lim: 0.4v2_constrained_smoother/ConstrainedSmoother"
#       reversing_enabled: true       # whether to detect forward/reverse direction and cusps. Should be set to false for paths without orientations assigned
#       path_downsampling_factor: 3   # every n-th node of the path is taken. Useful for speed-up
#       path_upsampling_factor: 1     # 0 - path remains downsampled, 1 - path is upsampled back to original granularity using cubic bezier, 2... - more upsampling
#       keep_start_orientation: true  # whether to prevent the start orientation from being smoothed
#       keep_goal_orientation: true   # whether to prevent the gpal orientation from being smoothed
#       minimum_turning_radius: 0.05  # minimum turning radius the robot can perform. Can be set to 0.0 (or w_curve can be set to 0.0 with the same effect) for diff-drive/holonomic robots
#       w_curve: 30.0                 # weight to enforce minimum_turning_radius
#       w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
#       w_smooth: 2000000.0           # weight to maximize smoothness of path
#       w_cost: 0.015                 # weight to steer robot away from collision and cost

#       # Parameters used to improve obstacle avoidance near cusps (forward/reverse movement changes)
#       w_cost_cusp_multiplier: 3.0   # option to use higher weight during forward/reverse direction change which is often accompanied with dangerous rotations
#       cusp_zone_length: 2.5         # length of the section around cusp in which nodes use w_cost_cusp_multiplier (w_cost rises gradually inside the zone towards the cusp point, whose costmap weight eqals w_cost*w_cost_cusp_multiplier)

#       # Points in robot frame to grab costmap values from. Format: [x1, y1, weight1, x2, y2, weight2, ...]
#       # IMPORTANT: Requires much higher number of iterations to actually improve the path. Uncomment only if you really need it (highly elongated/asymmetric robots)
#       # cost_check_points: [-0.185, 0.0, 1.0]

#       optimizer:
#         max_iterations: 70            # max iterations of smoother
#         debug_optimizer: false        # print debug info
#         gradient_tol: 5e3
#         fn_tol: 1.0e-15
#         param_tol: 1.0e-20

# collision_monitor:
#   ros__parameters:
#     base_frame_id: "base_footprint"
#     odom_frame_id: "odom"
#     cmd_vel_in_topic: "cmd_vel"
#     cmd_vel_out_topic: "cmd_vel_col"
#     state_topic: "collision_monitor_state"
#     transform_tolerance: 0.5
#     source_timeout: 5.0
#     base_shift_correction: True
#     stop_pub_timeout: 2.0
#     enable_stamped_cmd_vel: True  # False for Jazzy or older
#     use_realtime_priority: false
#     polygons: ["PolygonStop", "PolygonSlow", "FootprintApproach"]
#     PolygonStop:
#       type: "circle"
#       radius: 0.5
#       action_type: "stop"
#       min_points: 4  # max_points: 3 for Humble
#       visualize: True
#       polygon_pub_topic: "polygon_stop"
#       enabled: True
#     PolygonSlow:
#       type: "polygon"
#       points: "[[1.0, 1.0], [1.0, -1.0], [-0.5, -1.0], [-0.5, 1.0]]"
#       action_type: "slowdown"
#       min_points: 4  # max_points: 3 for Humble
#       slowdown_ratio: 0.3
#       visualize: True
#       polygon_pub_topic: "polygon_slowdown"
#       enabled: True
#     PolygonLimit:
#       type: "polygon"
#       points: "[[0.5, 0.5], [0.5, -0.5], [-0.5, -0.5], [-0.5, 0.5]]"
#       action_type: "limit"
#       min_points: 4  # max_points: 3 for Humble
#       linear_limit: 0.4
#       angular_limit: 0.5
#       visualize: True
#       polygon_pub_topic: "polygon_limit"
#       enabled: True
#     FootprintApproach:
#       type: "polygon"
#       action_type: "approach"
#       footprint_topic: "/local_costmap/published_footprint"
#       time_before_collision: 2.0
#       simulation_time_step: 0.02
#       min_points: 6  # max_points: 5 for Humble
#       visualize: False
#       enabled: True
#     VelocityPolygonStop:
#       type: "velocity_polygobehavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw
#     footprint_topic: local_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom
#     robot_base_frame: base_link
#     transform_timeout: 1.0
#     use_sim_time: False
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 0.425 #0.125
#     min_rotational_vel: -0.425 #0.065
#     rotational_acc_lim: 0.4n"
#       action_type: "stop"
#       min_points: 6
#       visualize: True
#       enabled: True
#       polygon_pub_topic: "velocity_polygon_stop"
#       velocity_polygons: ["rotation", "translation_forward", "translation_backward", "stopped"]
#       holonomic: false
#       rotation:
#         points: "[[0.3, 0.3], [0.3, -0.3], [-0.3, -0.3], [-0.3, 0.3]]"
#         linear_min: 0.0
#         linear_max: 0.05
#         theta_min: -1.0
#         theta_max: 1.0
#       translation_forward:
#         points: "[[0.35, 0.3], [0.35, -0.3], [-0.2, -0.3], [-0.2, 0.3]]"
#         linear_min: 0.0
#         linear_max: 1.0
#         theta_min: -1.0
#         theta_max: 1.0behavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw
#     footprint_topic: local_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom
#     robot_base_frame: base_link
#     transform_timeout: 1.0
#     use_sim_time: False
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 0.425 #0.125
#     min_rotational_vel: -0.425 #0.065
#     rotational_acc_lim: 0.4
#       translation_backward:
#         points: "[[0.2, 0.3], [0.2, -0.3], [-0.35, -0.3], [-0.35, 0.3]]"
#         linear_min: -1.0
#         linear_max: 0.0
#         theta_min: -1.0
#         theta_max: 1.0
#       # This is the last polygon to be checked, it should cover the entire range of robot's velocities
#       # It is used as the stopped polygon when the robot is not moving and as a fallback if the velocity
#       # is not covered by any of the other sub-polygons
#       stopped:
#         points: "[[0.25, 0.25], [0.25, -0.25], [-0.25, -0.25], [-0.25, 0.25]]"
#         linear_min: -1.0
#         linear_max: 1.0
#         theta_min: -1.0
#         theta_max: 1.0
#     observation_sources: ["scan"]
#     scan:
#       source_timeout: 0.2
#       type: "scan"
#       topic: "/scan_filtered"
#       enabled: True
    

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# behavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw
#     footprint_topic: local_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom
#     robot_base_frame: base_link
#     transform_timeout: 1.0
#     use_sim_time: False
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 0.425 #0.125
#     min_rotational_vel: -0.425 #0.065
#     rotational_acc_lim: 0.4

# robot_state_publisher:
#   ros__parameters:
#     use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 2000
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
